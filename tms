#!/usr/bin/env python3
"""
tms – tmux-fzf helper (Python rewrite, keeps “/” in session names)

Flags
-----
  -k   Kill one or more tmux sessions (exclusive)
  -d   Detached mode
  -e   Pick from existing sessions only
  -l   Link (new client on existing session); implies -e

If DIR is supplied and is a directory, it’s used directly.

`cfg/wloc.txt` (next to this script) lists search roots.  
A plain path contributes its first-level sub-dirs; an entry with glob
chars (* ? [ ]) is expanded as-is.
"""

from __future__ import annotations

import argparse
import glob
import os
import re
import subprocess
import sys
from pathlib import Path
from typing import List

# ───────────────────────── helpers ──────────────────────────


def run(cmd: List[str], check=False, capture=False) -> subprocess.CompletedProcess:
    return subprocess.run(cmd, check=check, text=True,
                          capture_output=capture)


def tmux_has(name: str) -> bool:
    return run(["tmux", "has-session", "-t", name], check=False).returncode == 0


def tmux_sessions() -> List[str]:
    cp = run(["tmux", "list-sessions", "-F", "#S"], capture=True, check=False)
    return cp.stdout.splitlines() if cp.stdout else []


def fzf_select(lines: List[str], prompt: str = "", multi=False) -> List[str]:
    if not lines:
        return []
    cmd = ["fzf", "--prompt", prompt]
    if multi:
        cmd.append("-m")
    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, text=True)
    out, _ = proc.communicate("\n".join(lines))
    return out.strip().splitlines() if proc.returncode == 0 else []


# ───────────────────── directory collection ───────────────────


def expand_line(raw: str) -> List[Path]:
    raw = os.path.expandvars(os.path.expanduser(raw))
    if any(ch in raw for ch in "*?[]"):
        paths = [Path(p) for p in glob.glob(raw)]
    else:
        p = Path(raw)
        paths = [c for c in p.iterdir()] if p.is_dir() else []
    return [p for p in paths if p.is_dir()]


def collect_choices(cfg: Path) -> List[str]:
    choices: set[str] = set()
    for line in cfg.read_text().splitlines():
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        choices.update(str(p) for p in expand_line(line))
    return sorted(choices)


# ─────────────────────────── main ────────────────────────────
def main() -> None:
    ap = argparse.ArgumentParser(add_help=False)
    ap.add_argument("-k", dest="kill", action="store_true")
    ap.add_argument("-d", dest="detached", action="store_true")
    ap.add_argument("-e", dest="existing", action="store_true")
    ap.add_argument("-l", dest="link", action="store_true")
    ap.add_argument("dir", nargs="?", default=None)
    args = ap.parse_args()

    # exclusivity
    if args.kill and (args.detached or args.link):
        print("[-k] is exclusive of -d and -l", file=sys.stderr)
        sys.exit(1)

    if args.link or args.kill:
        args.existing = True

    script_dir = Path(__file__).resolve().parent
    cfg_file = script_dir / "cfg" / "wloc.txt"
    inside_tmux = bool(os.environ.get("TMUX"))

    # ── selection ──
    selections: List[str]

    if args.dir and Path(args.dir).expanduser().is_dir() and not args.existing:
        selections = [str(Path(args.dir).expanduser().resolve())]
    else:
        if args.existing:
            prompt = "Select tmux session"
            prompt += "(s) to kill: " if args.kill else " to link: " if args.link else ": "
            selections = fzf_select(tmux_sessions(), prompt=prompt, multi=args.kill)
        else:
            selections = fzf_select(collect_choices(cfg_file), prompt="Select directory: ")

    if not selections:
        sys.exit(0)

    # ── kill mode ──
    if args.kill:
        for sess in selections:
            print(f"killing session: {sess}")
            run(["tmux", "kill-session", "-t", sess])
        return

    # from here on we operate on a single target
    target = selections[0]

    # ── derive session name ──
    if args.existing and not args.dir:
        sess_name = target
        workdir = None
    else:
        workdir = target
        # KEEP “/”; replace space, dot, and parentheses with underscores
        sess_name = re.sub(r"[ .()]", "_", workdir)

    # ── detached handling ──
    if args.detached:
        if not tmux_has(sess_name):
            run(["tmux", "new-session", "-ds", sess_name, "-c", workdir])
        elif args.link:
            run(["tmux", "new-session", "-t", sess_name, "-d"])
        return

    # ── normal / link / attach ──
    if inside_tmux:
        if not tmux_has(sess_name):
            run(["tmux", "new-session", "-ds", sess_name, "-c", workdir])
        elif args.link:
            run(["tmux", "new-session", "-dt", sess_name])
            sess_name = next(s for s in reversed(tmux_sessions()) if s.startswith(sess_name))
        run(["tmux", "switch-client", "-t", sess_name])
    else:
        if args.link:
            run(["tmux", "new-session", "-t", sess_name])
        elif tmux_has(sess_name):
            run(["tmux", "attach", "-t", sess_name])
        else:
            run(["tmux", "new-session", "-s", sess_name, "-c", workdir])


if __name__ == "__main__":
    main()

